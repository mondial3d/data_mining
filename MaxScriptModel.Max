fn convertToPhysicalMaterialAndReconnectMaps obj =
(
    if obj.material != undefined and classOf obj.material != PhysicalMaterial then
    (
        -- Create a new physical material
        local physMat = PhysicalMaterial()
        local oldMat = obj.material

        -- Attempt to reconnect diffuse map (base color)
        try
        (
            if oldMat.diffuseMap != undefined then
            (
                physMat.base_color_map = oldMat.diffuseMap
                physMat.base_color_map_enabled = true
            )
        ) catch (format "Error processing material for object %: %\n" obj.name (getCurrentException()))
        
        -- Apply the new physical material to the object
        obj.material = physMat
    )
)

fn convertMaxToGLB exportPath fileTxtPath =
(
    while (numLines = (getNumLines fileTxtPath)) > 0 do
    (
        local fileStream = openFile fileTxtPath mode:"r"
        local firstLine = readLine fileStream
        close fileStream

        local glbFilename = exportPath + "\\" + (getFilenameFile firstLine) + ".glb"

        try
        (
            loadMaxFile firstLine quiet:true

            for obj in objects do
            (
                convertToPhysicalMaterialAndReconnectMaps obj
            )

            exportFile glbFilename #noPrompt using:GLTFExporter
        ) catch (format "Error processing file %: %\n" firstLine (getCurrentException()))

        -- Remove the processed file path from file.txt
        deleteFileLine fileTxtPath 1
    )
)

fn getNumLines filename =
(
    local count = 0
    local fileStream = openFile filename mode:"r"
    if fileStream != undefined do
    (
        while not eof fileStream do
        (
            skipLine fileStream
            count += 1
        )
        close fileStream
    )
    count
)

fn deleteFileLine filename lineNumber =
(
    local lines = #()
    local fileStream = openFile filename mode:"r"
    if fileStream != undefined do
    (
        local currentLine = 1
        while not eof fileStream do
        (
            local line = readLine fileStream
            if currentLine != lineNumber do
                append lines line
            currentLine += 1
        )
        close fileStream
    )
    writeFile filename lines
)

fn writeFile filename lines =
(
    local fileStream = createFile filename
    if fileStream != undefined do
    (
        for line in lines do
        (
            format "%\n" line to:fileStream
        )
        close fileStream
    )
)

-- Usage
convertMaxToGLB "D:\\maxGLB" "D:\\file.txt"
