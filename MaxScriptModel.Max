fn convertToPhysicalMaterialAndReconnectMaps obj =
(
    if obj.material != undefined and classOf obj.material != PhysicalMaterial then
    (
        -- Create a new physical material
        local physMat = PhysicalMaterial()
        local oldMat = obj.material

        -- Attempt to reconnect diffuse map (base color)
        try
        (
            if oldMat.diffuseMap != undefined then
            (
                physMat.base_color_map = oldMat.diffuseMap
                physMat.base_color_map_enabled = true
            )
        ) catch (format "Error processing material for object %: %\n" obj.name (getCurrentException()))
        
        -- Apply the new physical material to the object
        obj.material = physMat
    )
)

fn convertMaxToGLB exportPath fileTxtPath =
(
    local fileStream = openFile fileTxtPath mode:"r"
    local allFiles = #()
    if fileStream != undefined do
    (
        while not eof fileStream do
        (
            append allFiles (readLine fileStream)
        )
        close fileStream
    )

    for file in allFiles do
    (
        local glbFilename = exportPath + "\\" + (getFilenameFile file) + ".glb"

        try
        (
            loadMaxFile file quiet:true

            for obj in objects do
            (
                convertToPhysicalMaterialAndReconnectMaps obj
            )

            exportFile glbFilename #noPrompt using:GLTFExporter
        ) catch (format "Error processing file %: %\n" file (getCurrentException()))

        -- Remove the processed file path from file.txt
        updateFileTxt fileTxtPath file
    )
)

fn updateFileTxt fileTxtPath processedFile =
(
    local fileStream = openFile fileTxtPath mode:"r"
    local remainingFiles = #()
    if fileStream != undefined do
    (
        while not eof fileStream do
        (
            local line = readLine fileStream
            if line != processedFile do
                append remainingFiles line
        )
        close fileStream
    )

    fileStream = createFile fileTxtPath
    if fileStream != undefined do
    (
        for line in remainingFiles do
        (
            format "%\n" line to:fileStream
        )
        close fileStream
    )
)

-- Usage
convertMaxToGLB "D:\\maxGLB" "D:\\file.txt"
